package algortymGenetyczny;

public class Population {
	//klasa wewnetrzna odpowiedzialna za wylicznie przystosowania populacji
	class Adaptation{
		Chromosome population [];
		double min;
		double adaptation [];
		double AVG;
		
		Adaptation(Chromosome[] population){
			this.population = population;
			adaptation = adaptPopulation();
			AVG = calcAVGAdaptation();
		}
		public double func(double x1,double x2) {
			return -1*(Math.pow(x1, 2) - Math.pow(x2, 2) +2.0); 
		}
		
		public double min(double adaptation[]) {
			double Min = adaptation[0];
			for (int i=1; i<adaptation.length; i++)
			{
				if (Min< adaptation[i] )
				{
					Min = adaptation[i];
					
				}				
				
			}							
			return Min;
			
		}
		
		
		public double adaptGenome(Chromosome genome) {
			return func(genome.decoding(1),genome.decoding(2));
		}
		
	
		
		private double [] adaptPopulation( ) {
			int n = population.length;
			double adaptation [] = new double[n];
			
			for(int i = 0; i<n;i++) {
				adaptation[i] = func(population[i].decoding(1),population[i].decoding(2));
			}
			
			this.min = min(adaptation);
			
			if(this.min <= 0)              // przesuni�cie warto�ci adaptacji
				for(int i = 0; i<n; i++)
				{
					adaptation[i] += Math.abs(min) + 1;
				}
			
			return adaptation;  
			
			
		}
		
		public void showAdaptation() {
			int n = adaptation.length;
			for(int i = 0 ; i < n; i++) {
				System.out.println(adaptation[i]);
			}
		}
		
		public int invidualsBelowAVG() {
			int count = 0;
			for(int i = 0 ; i < n; i++) {
				if(adaptation[i] < AVG)
					count++;
			}
			return count;
		}
		
		public int invidualsAboveOrEqualAVG() {
			int count = 0;
			int n = adaptation.length;
			for(int i = 0 ; i < n; i++) {
				if(adaptation[i] >= AVG)
					count++;
			}
			return count;
		}
		
		private double calcAVGAdaptation() {
			int n = adaptation.length;
			double sum = 0.0;
			for(int i = 0 ; i < n; i++) {
				sum+=adaptation[i];
			}
			return sum / n ;
		}
	}
	
	int n = 1;
	Adaptation Adaptation;
	Chromosome population[];
	Chromosome base;
	
	public Population(Chromosome base,int n) {
		this.base = base;
		this.n = n;
		population = generatePopulation();
		Adaptation = new Adaptation(population);
	}
	

	private Chromosome[] generatePopulation() {
		Chromosome[] population = new Chromosome[n];
		
		for(int i = 0; i < n; i++) {
			population[i] = new Chromosome(base.getStart(),base.getEnd(),base.n,base.precision);
		}
		return population;
	}
	
	public void showPopulationAsBinary() {
		for(int i = 0 ; i < n; i++) {
			System.out.println(population[i].chromosome);
		}
	}
	
	public void showPopulation() {
		for(int i = 0 ; i < n; i++) {
			System.out.println("CHROMOSOME"+(i+1));
			System.out.println(new String(population[i].chromosome)+"|"+Adaptation.adaptation[i]);
			for(int j = 1 ; j <= population[i].n; j++)
			{
				System.out.print(population[i].decoding(j)+",");
			}
			System.out.println();
		}
	}
	
	public boolean isBelowAVG(Chromosome genome) {
		return Adaptation.adaptGenome(genome) < Adaptation.AVG;
	}
	
	public boolean isAboveAVG(Chromosome genome) {
		return Adaptation.adaptGenome(genome) >= Adaptation.AVG;
	}
	
	public Population setPopulation(Chromosome[] _population) {
		Population population = new Population(this.base,this.n);
		population.population = _population;
		population.Adaptation.adaptation = population.Adaptation.adaptPopulation();
		population.Adaptation.AVG = population.Adaptation.calcAVGAdaptation();
		
		return population;
	}
	
	
	
	public void showDetails() {
		System.out.println("========POPULATION AS BINARY==========");
		showPopulationAsBinary();
		System.out.println("========POPULATION'S ADAPTATION==========");
		Adaptation.showAdaptation();
		System.out.println("========POPULATION'S VIEW==========");
		showPopulation();
		System.out.println("======== AVG POPULATION'S ADAPTATION==========");
		System.out.println(Adaptation.AVG);
		System.out.println("======== COUNT BELOW AVG==========");
		System.out.println(Adaptation.invidualsBelowAVG());
		System.out.println("======== COUNT ABOVE OR EQUAL AVG==========");
		System.out.println(Adaptation.invidualsAboveOrEqualAVG());
	}
	
	
}