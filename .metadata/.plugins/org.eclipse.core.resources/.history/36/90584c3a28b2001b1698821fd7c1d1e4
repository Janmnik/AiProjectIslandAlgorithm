package algortymGenetyczny;

public class Zad1 {
	
	public Population mutuj(Population populacja) {
		double prawdob = 0.02;
		Mutation mutacja = new Mutation(prawdob);
		for(int i=0;i<populacja.population.length; i++) {
			if (Math.random()<prawdob) {
				populacja.population[i]=mutacja.genomeMutation(populacja.population[i]);		
			}
	}
	return populacja;		
}
	
	public Population Krzyzuj(Population populacja) throws CloneNotSupportedException {
		int losowyChromosom = 0;
		int dlugoscChromosomu = populacja.population[0].getChromosomeLength();
		double losowePrawdob = 0.0;
		double prawdobKrzyzowania = 0.6;
		
		Chromosome Rodzic1, Rodzic2;
		for(int i=0; i<populacja.population.length;i++) {
			losowePrawdob = Math.random();
			if (losowePrawdob<prawdobKrzyzowania)
			{
				losowyChromosom = (int)(Math.random()*populacja.population.length);
				Intersection2P Krzyzowanie = new Intersection2P(populacja.population.length);
				Rodzic1 = (Chromosome)populacja.population[i].clone();
				Rodzic2 = (Chromosome)populacja.population[losowyChromosom].clone();
				populacja.population[i] = Krzyzowanie.getChild(Rodzic1, Rodzic2);
				populacja.population[losowyChromosom] = Krzyzowanie.getChild(Rodzic2, Rodzic1);
			}	
		
		}
		return populacja;
	}
	
	
	
	
	public static void main(String[] args) throws CloneNotSupportedException {
	
		Zad1 Z1 = new Zad1();
		System.out.println("================ BIE��CA POPULACJA ===============");
		Population population1 = new Population(new Chromosome(-2,2,2,100000d),20);
        population1.showPopulation();
		
		int adaptationNumber = 0;
		int zm = 1;
        while ( adaptationNumber<999)
        {
        	System.out.println("populacja " + zm);
        	DecisionRoulette roulette = new DecisionRoulette(population1,"MAX");
    		population1 = roulette.newPopulation;
    		population1 = Z1.Krzyzuj(population1);
    		population1 = Z1.mutuj(population1);
        	adaptationNumber += population1.n;
        	population1.showPopulation();
        	//System.out.println(population1.population.length);
        }
        
        
		
		
		DecisionRoulette roulette = new DecisionRoulette(population1,"MAX");
		population1 = roulette.newPopulation;
		
		
		
	}
	

	
	

	

}
