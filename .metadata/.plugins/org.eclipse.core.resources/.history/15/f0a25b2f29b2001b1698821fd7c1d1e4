package algortymGenetyczny;

import java.util.ArrayList;
import java.util.Arrays;
public class Algorytm {
	
	public double Ai;
	public double Bi;
	private double mutationPropability;
	private double crossingPropability;
	private double env;
	
	private int n, populationLength;
	private double precision;
	private int times;
	
	private static boolean firstRun = true;
	
	public Algorytm(double _Ai, double _Bi,double _precision,int _n,int _populationLength,double _env,double _mutationPropability, double _crossingPropability, int _times) {
		Ai = _Ai;
		Bi = _Bi;
		mutationPropability = _mutationPropability;
		crossingPropability = _crossingPropability;
		precision = _precision;
		populationLength = _populationLength;
		env = _env;
		n = _n;
		times = _times;
		
	}
	
	public void run(FunkcjaCeluZad1 goal) throws CloneNotSupportedException{
		
		//1 krok inicjalizacja poczatkowej populacji chromosomow
		//2 krok ocena przystosowania chromosomow w populacji
		//3 krok: selekcja choromosomow: ruletka
		//4 krok: zastpspwanie operatorow genetycznych
		//	mutowanie
		//	krzyzowanie
		//5 krok: stworzenie nowej popualcji
		
		Zapisywacz globalMaxes = new Zapisywacz(String.format("globalMAX%d .txt",populationLength));
		double AVGMAX [][] = new double[times][(int)(1000)];
		double AVGS[][] = new double[times][(int)(1000)];
		
		for(int i = 0 ; i < times; i++) {
			int generation  = 1;
			Czlonek baseChromosome = new Czlonek(Ai,Bi,n,precision);
			//krok 1 & 2
			Populacja populacja = new Populacja(baseChromosome,populationLength);
			populacja.adaptPopulation(goal);	
			int j = 0;
			
			int adaptationNR = 0;
			
			while(adaptationNR < env) {
				//krok 3
				
				if(firstRun == true && adaptationNR % 20 == 0) {
					Zapisywacz adaptationSteps = new Zapisywacz(String.format("adaptationSteps%d .txt", populationLength));
					adaptationSteps.WriteToFile(String.format("%d", adaptationNR));
				}
				
				populacja = new Ruletka(populacja,"MAX").newPopulation;
				AVGMAX[i][j] = populacja.Adaptation.MAX;
				AVGS[i][j] = populacja.Adaptation.AVG;
				//krok 4 & 5
				populacja = crossingChromosomes(populacja);
				populacja = mutatePopulation(populacja);
				
				System.out.println("GENERACJA "+generation);
				generation++;
				populacja.Adaptation.showAdaptation();
				j++;
				adaptationNR++;	
			}
			firstRun = false;
			globalMaxes.WriteToFile(String.format("%g",populacja.GLOBALMAX));
		}
		
		Zapisywacz localMax = new Zapisywacz(String.format("localMax%d .txt",populationLength));
		Zapisywacz localAVG = new Zapisywacz(String.format("localAVG%d .txt",populationLength));
		double localMaxes[] =  calculateAVGLocal(AVGMAX);
		double localAVGS[] = calculateAVGLocal(AVGS);
		
		for(int i = 0; i < localMaxes.length;i++) {
			localMax.WriteToFile(String.format("%g", localMaxes[i]));
			localAVG.WriteToFile(String.format("%g", localAVGS[i]));
		}
	}
	
	
	private Populacja mutatePopulation(Populacja populacja) {
		
		Mutacja mutacja = new Mutacja(mutationPropability);
		int length = populacja.population.length;
		for(int i = 0; i < length;i++) {
			
			if(Math.random() < mutationPropability) {
				populacja.population[i] = mutacja.genomeMutation(populacja.population[i]);
			}
		}
		
		return populacja;
	}
	
	private Populacja crossingChromosomes(Populacja crossingPopulation) throws CloneNotSupportedException {
		
		int randomChromosome;
		int chromosomeLength = crossingPopulation.population[0].getChromosomeLength();
		int length = crossingPopulation.population.length;
		double randomPropability = 0.0;
		
		Czlonek parentX,parentY;
		for(int i = 0;i<length;i++) {
			randomPropability = Math.random();
			if(randomPropability<=crossingPropability) {
				randomChromosome = (int)(Math.random()*length);
				Krzyzowanie2Punkt krzyzowanie2Punkt = new Krzyzowanie2Punkt(chromosomeLength);
				parentX = (Czlonek) crossingPopulation.population[i].clone();
				parentY = (Czlonek) crossingPopulation.population[randomChromosome].clone();
				crossingPopulation.population[i] = krzyzowanie2Punkt.getChild(parentX, parentY);
				crossingPopulation.population[randomChromosome] = krzyzowanie2Punkt.getChild(parentY, parentX);
			}
		}
		
		return crossingPopulation;
	}
	
	
	private double[] calculateAVGLocal(double[][]arr) {
		double AVGLocalMAX [] = new double[times];
		for(int i = 0; i < times;i++) {
			AVGLocalMAX[i] = calculateAVG(arr[i]);
		}
		return AVGLocalMAX;
	}
	
	private double calculateAVG(double[] arr) {
		return Arrays.stream(arr).average().getAsDouble();
	}
	
	
}